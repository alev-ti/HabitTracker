import UIKit

// –ú–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
let mockCategories: [TrackerCategory] = [
    TrackerCategory(
        title: "–î–æ–º–∞—à–Ω–∏–π —É—é—Ç",
        trackers: [
            Tracker(id: UUID(), name: "–ü–æ–ª–∏–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è", color: .systemGreen, emoji: "üå±", schedule: [.Monday, .Wednesday, .Friday])
        ]
    ),
    TrackerCategory(
        title: "–†–∞–¥–æ—Å—Ç–Ω—ã–µ –º–µ–ª–æ—á–∏",
        trackers: [
            Tracker(id: UUID(), name: "–ö–æ—à–∫–∞ –∑–∞—Å–ª–æ–Ω–∏–ª–∞ –∫–∞–º–µ—Ä—É –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ", color: .systemYellow, emoji: "üê±", schedule: [.Tuesday, .Thursday]),
            Tracker(id: UUID(), name: "–ë–∞–±—É—à–∫–∞ –ø—Ä–∏—Å–ª–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∫—É –≤ –≤–æ—Ç—Å–∞–ø", color: .systemOrange, emoji: "üíå", schedule: [.Saturday, .Sunday])
        ]
    )
]

// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
final class TrackersViewController: UIViewController {
    
    private let stubImageView: UIImageView = {
        let imageView = UIImageView(image: UIImage(named: "stub_no_trackers"))
        imageView.contentMode = .scaleAspectFit
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    private let stubLabel: UILabel = {
        let label = UILabel()
        label.text = "–ß—Ç–æ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?"
        label.textColor = UIColor(red: 26/255, green: 27/255, blue: 34/255, alpha: 1)
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 12)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let titleLabel: UILabel = {
        let titleLabel = UILabel()
        titleLabel.text = "–¢—Ä–µ–∫–µ—Ä—ã"
        titleLabel.font = UIFont.boldSystemFont(ofSize: 34)
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        return titleLabel
    }()
    
    private let searchBar: UISearchBar = {
       let searchBar = UISearchBar()
       searchBar.placeholder = "–ü–æ–∏—Å–∫"
       searchBar.backgroundImage = UIImage()
       searchBar.translatesAutoresizingMaskIntoConstraints = false
       return searchBar
    }()
    
    private let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.minimumInteritemSpacing = 10
        layout.minimumLineSpacing = 10
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.register(TrackerCell.self, forCellWithReuseIdentifier: "TrackerCell")
        collectionView.backgroundColor = .clear
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    private let datePicker: UIDatePicker = {
        let picker = UIDatePicker()
        picker.datePickerMode = .date
        picker.preferredDatePickerStyle = .compact
        picker.translatesAutoresizingMaskIntoConstraints = false
        return picker
    }()
    
    private var categories: [TrackerCategory] = mockCategories
    private var completedTrackers: Set<UUID> = [] // –•—Ä–∞–Ω–∏–º ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–æ–≤
    private var currentDate: Date = Date() // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupDatePicker()
        updateStubVisibility()
    }
    
    private func setupUI() {
        view.backgroundColor = .white
        
        // –ö–Ω–æ–ø–∫–∞ "+" —Å–ª–µ–≤–∞
        navigationItem.leftBarButtonItem = UIBarButtonItem(
            image: UIImage(systemName: "plus", withConfiguration: UIImage.SymbolConfiguration(weight: .semibold)),
            style: .plain,
            target: self,
            action: #selector(addTracker)
        )
        navigationItem.leftBarButtonItem?.tintColor = UIColor(red: 26/255, green: 27/255, blue: 34/255, alpha: 1)
        
        // DatePicker —Å–ø—Ä–∞–≤–∞
        navigationItem.rightBarButtonItem = UIBarButtonItem(customView: datePicker)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω
        view.addSubview(titleLabel)
        view.addSubview(searchBar)
        view.addSubview(collectionView)
        view.addSubview(stubImageView)
        view.addSubview(stubLabel)
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã
        NSLayoutConstraint.activate([
            titleLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 16),
            titleLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            
            searchBar.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 16),
            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            
            collectionView.topAnchor.constraint(equalTo: searchBar.bottomAnchor, constant: 16),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            
            stubImageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            stubImageView.centerYAnchor.constraint(equalTo: view.centerYAnchor, constant: -50),
            stubImageView.widthAnchor.constraint(equalToConstant: 100),
            stubImageView.heightAnchor.constraint(equalToConstant: 100),
            
            stubLabel.topAnchor.constraint(equalTo: stubImageView.bottomAnchor, constant: 10),
            stubLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
        collectionView.register(
            TrackerHeaderView.self,
            forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
            withReuseIdentifier: "Header"
        )
        
        collectionView.delegate = self
        collectionView.dataSource = self
    }
    
    private func setupDatePicker() {
        datePicker.addTarget(self, action: #selector(datePickerValueChanged), for: .valueChanged)
    }
    
    @objc private func datePickerValueChanged() {
        currentDate = datePicker.date
        collectionView.reloadData()
    }
    
    private func updateStubVisibility() {
        let isEmpty = categories.isEmpty
        stubImageView.isHidden = !isEmpty
        stubLabel.isHidden = !isEmpty
        collectionView.isHidden = isEmpty
    }
    
    @objc private func addTracker() {
        let trackerTypeVC = TrackerTypeViewController()
        trackerTypeVC.modalPresentationStyle = .pageSheet
        trackerTypeVC.onTrackerTypeSelected = { [weak self] trackerType in
            if trackerType == .habit {
                self?.showHabitCreationScreen()
            } else {
                // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            }
        }
        present(trackerTypeVC, animated: true)
    }
    
    private func showHabitCreationScreen() {
        let habitVC = HabitCreationViewController()
        habitVC.modalPresentationStyle = .pageSheet
        habitVC.onCancel = { [weak self] in
            self?.dismiss(animated: true)
        }
        habitVC.onCreate = { [weak self] tracker in
            let newCategory = TrackerCategory(title: "–ü—Ä–∏–≤—ã—á–∫–∏", trackers: [tracker])
            self?.categories.append(newCategory)
            self?.updateStubVisibility()
            self?.dismiss(animated: true)
        }
        present(habitVC, animated: true)
    }
    
    // –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
    private func toggleTrackerCompletion(for trackerId: UUID) {
        if completedTrackers.contains(trackerId) {
            completedTrackers.remove(trackerId)
        } else {
            completedTrackers.insert(trackerId)
        }
        collectionView.reloadData()
    }
}

// MARK: - UICollectionViewDelegate, UICollectionViewDataSource
extension TrackersViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return categories.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return categories[section].trackers.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "TrackerCell", for: indexPath) as! TrackerCell
        let tracker = categories[indexPath.section].trackers[indexPath.row]
        let isCompleted = completedTrackers.contains(tracker.id)
        cell.configure(with: tracker, isCompleted: isCompleted, daysCount: 5, completionHandler: { [weak self] in
            self?.toggleTrackerCompletion(for: tracker.id)
        })
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = (collectionView.bounds.width - 10) / 2
        return CGSize(width: width, height: 148)
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "Header", for: indexPath) as! TrackerHeaderView
        header.titleLabel.text = categories[indexPath.section].title
        return header
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.bounds.width, height: 40)
    }
}
